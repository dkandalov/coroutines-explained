
			(define (print message)
			    (display message)
			    (newline)
			)

			(define (make-generator callback)
			    (define (yield)
			        (call/cc (lambda (continuation)
			            (set! yield-point continuation)
			            (jump-out #f)
			        )))
			    (define (resume)
			        (call/cc (lambda (continuation)
			            (set! jump-out continuation)
			            (yield-point #f)
			        )))
			    (define yield-point #f)
			    (set! yield-point (lambda (_)
			        (callback yield)
			        (jump-out #f)
			    ))
			    resume
			)

			(define (f yield)
			    (print 2)
			    (yield)
			    (print 4)
			    (yield)
			    (print 6)
			)

			(define (main args)
			    (print 1)
			    (define resume (make-generator f))
			    (resume)
			    (print 3)
			    (resume)
			    (print 5)
			    (resume)
			    (print 7)
			)
